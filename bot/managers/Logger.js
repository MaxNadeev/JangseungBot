import fs from 'fs/promises';
import JsonManager from './JsonManager.js';
import { config } from 'dotenv';
import dotenv from 'dotenv'; 
dotenv.config();

class Logger {
    constructor(bot) {
        this.adminId = process.env.ADMIN_ID;
        this.bot = bot;
        this.membersLogging = false;
        this.messagesLogging = false;
        this.configPath = './config.json';
        this.reportPath = './reportError.txt';
    }

    // ======================
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    // ======================

    async sendToAdmin(message) {
        try {
            await this.bot.telegram.sendMessage(
                this.adminId, 
                message, 
                { parse_mode: 'HTML' }
            );
        } catch (error) {
            console.error(`Error sending to admin:`, error);
        }
    }

    async sendMessage(chatId, text, options = {}) {
        return this.bot.telegram.sendMessage(chatId, text, {
            parse_mode: 'HTML',
            ...options
        });
    }

    async reply(ctx, text, options = {}) {
        return ctx.reply(text, {
            parse_mode: 'HTML',
            ...options
        });
    }

    // ======================
    // –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    // ======================

    async loadConfig() {
        try {
            const config = await JsonManager.read(this.configPath);
            if (!config?.logging) {
                throw new Error('Invalid config structure');
            }
            
            this.messagesLogging = config.logging.messages;
            this.membersLogging = config.logging.members;
            
            await this.sendToAdmin('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } catch (error) {
            await this.sendToAdmin(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: <code>${error.message}</code>`);
        }
    }

    async saveConfig() {
        const config = {
            logging: {
                members: this.membersLogging,
                messages: this.messagesLogging
            }
        };
        
        try {
            await JsonManager.write(this.configPath, config);
            await this.sendToAdmin('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } catch (error) {
            await this.sendToAdmin(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: <code>${error.message}</code>`);
        }
    }

    // ======================
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    // ======================

    async handleMemberUpdate(ctx, actionType) {
        if (!this.membersLogging) return;

        const { old_chat_member, new_chat_member } = ctx.update.chat_member;
        const member = new_chat_member.user;
        
        const actions = {
            'left_to_member': {
                title: '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                hashtag: '#–ù–æ–≤—ã–π–£—á–∞—Å—Ç–Ω–∏–∫'
            },
            'left_to_restricted': {
                title: '–î–æ–±–∞–≤–ª–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏',
                hashtag: '#–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π–î–æ–±–∞–≤–ª–µ–Ω'
            },
            // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        };

        const action = actions[actionType];
        if (!action) return;

        const message = `
<b>${action.title}</b>
üë§ ${this.getUserInfo(member)}
–ß–∞—Ç: ${ctx.chat.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
${action.hashtag} ${this.getUserTag(member)}
        `;

        await this.sendToAdmin(message.trim());
    }

    // ======================
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    // ======================

    async logMessage(ctx) {
        if (!this.messagesLogging || ctx.chat.id.toString() === this.adminId) return;

        const message = `
<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>
üìù ${ctx.message.text?.substring(0, 100) || '–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ'}
üë§ ${this.getUserInfo(ctx.from)}
–ß–∞—Ç: ${ctx.chat.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
${this.getUserTag(ctx.from)}
        `;

        await this.sendToAdmin(message.trim());
    }

    // ======================
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    // ======================

    getUserInfo(user) {
        const name = [user.first_name, user.last_name].filter(Boolean).join(' ') || '–ë–µ–∑ –∏–º–µ–Ω–∏';
        const username = user.username ? `@${user.username}` : '';
        return `${name} ${username} (ID: ${user.id})`;
    }

    getUserTag(user) {
        return user.username 
            ? `#${user.username} #id${user.id}`
            : `#id${user.id} #–ë–µ–∑Username`;
    }

    // ======================
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    // ======================

    async logError(error, context = '') {
        const timestamp = new Date().toLocaleString('ru');
        const errorMessage = `
<b>–û–®–ò–ë–ö–ê</b> [${timestamp}]
${context}
<code>${error.message || JSON.stringify(error)}</code>
        `;

        await this.sendToAdmin(errorMessage.trim());
        await this.writeErrorReport(error);
    }

    async writeErrorReport(error) {
        try {
            const timestamp = new Date().toLocaleString('ru');
            await fs.appendFile(this.reportPath, `[${timestamp}] ${error.stack}\n\n`);
        } catch (err) {
            console.error('Failed to write error report:', err);
        }
    }

    // ======================
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º
    // ======================

    async sendStartupReport() {
        try {
            let report = '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω';
            try {
                const errorContent = await fs.readFile(this.reportPath, 'utf-8');
                if (errorContent) {
                    report += `\n\n–ü—Ä–µ–¥—ã–¥—É—â–∞—è –æ—à–∏–±–∫–∞:\n<code>${errorContent.substring(0, 1000)}</code>`;
                    await fs.unlink(this.reportPath);
                }
            } catch {} // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            
            await this.sendToAdmin(report);
        } catch (error) {
            console.error('Startup report failed:', error);
        }
    }
}

export { Logger };